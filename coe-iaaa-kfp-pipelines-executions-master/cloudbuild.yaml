steps:
  ################################ Install dependencies ################################
  - name: python:3.7
    id: Install dependencies
    entrypoint: bash
    args:
      - -c
      - |
        python -m pip install --upgrade pip
        pip install . --user

        
  ################################ Package: Build ################################
  - name: python:3.7
    id: Package - Build
    entrypoint: bash
    args:
      - -c
      - |
        python setup.py check
        rm -rf dist/
        python setup.py egg_info --egg-base /tmp sdist --dist-dir /workspace/dist
        echo "aikfp" > /workspace/PACKAGE_NAME
        echo "Building Package:" $(cat /workspace/PACKAGE_NAME)
        echo PACKAGE_URI_DIR=$(python -c "import os; from $(cat /workspace/PACKAGE_NAME).config import get_package_uri; print(get_package_uri(dir_path=True))") > /workspace/PACKAGE_URI_DIR

  ################################ Package: Get version ################################
  
  - name: python:3.7
    id: Package - Get version
    entrypoint: bash
    args:
      - -c
      - |
        echo $(python -c "import os; from $(cat /workspace/PACKAGE_NAME) import config; print(config.PACKAGE_FILENAME)") > /workspace/PACKAGE_VER_NUM_VAL
        echo $(python -c "import os; print(os.environ.get('DEBUG').upper())") > /workspace/DEBUG_FLAG
        echo $(python -c "import os; from $(cat /workspace/PACKAGE_NAME).config import get_package_uri; print(get_package_uri(dir_path=True))")  > /workspace/PACKAGE_PATH_VAL
        echo $(cat /workspace/PACKAGE_VER_NUM_VAL)
        echo $(cat /workspace/DEBUG_FLAG)
        
   ################################ Package: Validate version ################################
  
  - name: gcr.io/cloud-builders/gsutil
    id: Package - Validate version
    entrypoint: bash
    args:
      - -c
      - |
        echo $(gsutil ls $(cat /workspace/PACKAGE_PATH_VAL) | grep $(cat /workspace/PACKAGE_VER_NUM_VAL) | wc -l) > /workspace/VERSION_FOUND
        echo "$(cat /workspace/PACKAGE_PATH_VAL)"
        echo "$(cat /workspace/VERSION_FOUND)"
        echo "$(cat /workspace/DEBUG_FLAG)"
        if [ "$(cat /workspace/VERSION_FOUND)" = "0" ] || [ "$(cat /workspace/DEBUG_FLAG)" = "TRUE" ]; then echo "Nueva version aceptada ($(cat /workspace/PACKAGE_VER_NUM_VAL))."; exit 0; else echo "Version existente ($(cat /workspace/PACKAGE_VER_NUM_VAL)), revisar."; exit 1; fi

  ################################ Package: Upload to GCS ################################
  - name: gcr.io/cloud-builders/gsutil
    id: Package - Upload to GCS
    entrypoint: bash
    args:
      - -c
      - |
        source /workspace/PACKAGE_URI_DIR &&
        gsutil cp -r "/workspace/dist/." "$$PACKAGE_URI_DIR"
        echo $$PACKAGE_URI_DIR

  ################################ Training pipeline: Compile ################################
  - name: python:3.7
    id: Training pipeline - Compile
    entrypoint: bash
    args:
      - -c
      - |
        python -c "from pipeline.train import compile_pipeline; compile_pipeline('/workspace/training_pipeline.json')"
        echo PIPELINE_TRAIN_PATH=$(python -c "from pipeline.train import pipeline_path; print(pipeline_path)") > /workspace/PIPELINE_TRAIN_PATH

  ################################ Training pipeline: Upload to GCS ################################
  - name: gcr.io/cloud-builders/gsutil
    id: Training pipeline - Upload to GCS
    entrypoint: bash
    args:
      - -c
      - |        
        source /workspace/PIPELINE_TRAIN_PATH &&
        gsutil cp "/workspace/training_pipeline.json" "$$PIPELINE_TRAIN_PATH"
        echo $$PIPELINE_TRAIN_PATH

  ################################ Training pipeline: Run ################################
  - name: python:3.7
    id: Training pipeline - Run
    entrypoint: bash
    args:
      - -c
      - |
        python -c "from pipeline.train import run_pipeline; run_pipeline()"

  #### Batch Prediction
  # Batch Prediction Pipeline: Compile
  # Batch Prediction Pipeline: Upload to GCS
  # Batch Prediction Pipeline: Run (scheduled)

  #### Online Prediction (Artifacts downloaded in Training Pipeline)
  # Online Prediction Pipeline: Test predict function

  # ################################ Batch Prediction Pipeline: Compile ################################
  # - name: python:3.7
  #   id: Compile Batch Prediction Pipeline
  #   entrypoint: bash
  #   args:
  #     - -c
  #     - |
  #       python -c "from pipeline.predict import compile_pipeline; compile_pipeline('/workspace/prediction_pipeline.json')"
  #       echo PIPELINE_PREDICT_PATH=$(python -c "from pipeline.predict import pipeline_path; print(pipeline_path)") > /workspace/PIPELINE_PREDICT_PATH

  # ################################ Batch prediction pipeline: Upload to GCS ################################
  # - name: gcr.io/cloud-builders/gsutil
  #   id: Batch prediction pipeline - Upload to GCS
  #   entrypoint: bash
  #   args:
  #     - -c
  #     - |        
  #       source /workspace/PIPELINE_PREDICT_PATH &&
  #       gsutil cp "/workspace/prediction_pipeline.json" "$$PIPELINE_PREDICT_PATH"
  #       echo $$PIPELINE_TRAIN_PATH

logsBucket: '$_LOG_BUCKET'
timeout: 7200s
options:
  env:
  - 'ENV=$_ENV'
  - 'GOOGLE_CLOUD_PROJECT=$_GOOGLE_CLOUD_PROJECT'
  - 'LOCATION=$_LOCATION'
  - 'GS_ADS=$_GS_ADS'
  - 'GS_ARTIFACT_STORE=$_GS_ARTIFACT_STORE'
  - 'GS_LOG=$_GS_LOG'
  - 'SERVICE_ACCOUNT=$_SERVICE_ACCOUNT'
  - 'BQ_MODEL_GOVERNANCE=$_BQ_MODEL_GOVERNANCE'
  - 'BQ_FEATURE_STORE=$_BQ_FEATURE_STORE'
  - 'GCF_VERTEX_CALLER=$_GCF_VERTEX_CALLER'
  - 'DEBUG=$_DEBUG'
  secretEnv: ['GH_TOKEN']
tags:
- 'ml-pipeline'
# serviceAccount: string
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_NUMBER/secrets/$_SECRET_GH_TOKEN/versions/latest
    env: 'GH_TOKEN'
